{"name":"The Platform","tagline":"A secure, resilient, distributed and open communication platform.","body":"# Introduction\r\n\r\nThis decentralized platform allows people to communicate and if desired, trade with each other securely through their existing anonymity network of choice. \r\n\r\n100% of the software is open-source and freely available for download and inspection.\r\n\r\nA person who wishes to access the platform must run a small piece of software (the client) which executes wholly on their own system and is responsible for ensuring communications are secured and correctly routed through the network to the desired recipients. There is no centralized list of users, rather each person identifies themselves to the network and each other using a PGP key of their choosing.\r\n\r\nAfter starting the client, users access the platform via a standard web browser, all browsers are supported and the platform makes no use of any client browser side scripting (e.g. Javascript). The client is shown in this screenshot.\r\n\r\n![Client](/client/images/listings.png).\r\n\r\nThe client enables users to:\r\n\r\n1. Publish a profile for other users to see\r\n1. Publish listings, or items that they may have for sale\r\n1. Send and receive private messages with any other users\r\n1. View profiles and listings of other users\r\n1. Place orders for items that other users are selling\r\n1. Accept orders from other users who wish to purchase fron you\r\n1. Use third party notaries (other users) to act as both escrow agents and/or to notarize orders thus allowing buyer and seller feedback/ratings to be left.\r\n\r\nThe decentralized platform utilizes a number of independent but federated broker systems which accepts communications from users and ensure that messages for other users are delivered immediately or stored until the recipient is next online. All brokers synchronize data between each other and clients will randomly choose a broker to connect to each time the client is started.\r\n\r\nAlthough anybody can run a broker it is expected that very few users will do so however as it requires a system that will remain permenantly connected to Tor and/or I2P. The number of brokers is expected to vary over time as are the number of broker operators. \r\n\r\nThe client is designed to place no trust in brokers and also to remain largely unaffected in the event that even the majority of brokers are taken out.\r\n\r\n##Obtaining the software\r\n\r\nThe client software may be downloaded from the primary repository which is hosted on GitHub. There are two options available.\r\n\r\n1. Download the Python source code and run directly from source\r\n1. Download a pre-compiled binary for the desired platform (Linux, Mac or Windows)\r\n\r\n#Client Walkthrough\r\n\r\nThe client software, which is the only ccomponent that most users will hve exposure to, is intended to be simple to use. The following series of screen shots summarize the application as it stands right now.\r\n\r\nThe very first time that the client is run, an installation screen will appear when the client i accessed through the browser. The installation screen require that the user select a PGP to use as identity as well as provide details such as chosen display name (the name shown to other usres) and Tor and i2p proxy settings.\r\n\r\n![Client](/client/images/installation.png).\r\n\r\n#Technical Overview\r\n\r\nThis is a secure messaging and communication client written in 100% Python. The client currently consists of the following main elements:\r\n\r\n1. Flask web front end providing user access to the application\r\n1. Sqlalchemy interface to PySqlCipher wrapped Sqlite database\r\n1. MQTT client for messaging  \r\n\r\n##Security Objectives\r\n\r\n1. No unencrypted data shall be stored on the file-system at any time\r\n1. All user to user communications shall be encrypted\r\n1. Messages will automatically purge after a period of time\r\n1. Clients and brokers will attempt to mitigate denial of service attacks\r\n1. Brokers shall not have access to any unencrypted messages\r\n\r\n##Architecture\r\n\r\nOne or more Mosquito MQTT brokers provide the messaging backbone. These are deployed in bridged mode with all topics to be shared between brokers. It is up to broker operators to establish trust between themselves.\r\n\r\nThe basic client is a simple Flask web application which is the primary component of this platform. The client includes an MQTT stack and communicates with other peers by one or more brokers.\r\n\r\nPGP keys are used as the primary identity, there is no central user database or password list. A user proves their identity to the system and other users using PGP only. All PGP operations are performed using GPG on the users system. All messages between users are automatically and transparently encrypted using PGP. Optionally messages may be automatically signed to prove authenticity to the recipient.\r\n\r\n##Basic Client Operation Overview\r\n\r\n1. Client application is started and may be accessed using a web-browser at http://127.0.0.1:7755\r\n1. If first run is detected then an initial set-up procedure is executed that requires the user to provide their PGP key and passphrase and a chosen display name. The application will create the encrypted local database and encrypt the database key using the users chosen PGP key. This concludes the initial setup.\r\n1. The user is prompted to select a PGP key and provide the corresponding passphrase to access the application\r\n1. The 'secret' file is PGP de-crypted and the SQL password is then read and used to decrypt and access the local database.\r\n1. The client now attempts to establish a connection to the MQTT broker specified in the configuration. A customized PGP authentication plugin is used on each broker which allows client to authenticate using their chosen PGP key. The user identity consists of the 16 Byte PGP key ID.\r\n1. If the connection is successful then the client establishes a number of PUB/SUB topics on the broker using the users PGP key as a username. Any queued messages will be delivered to the client\r\n1. The client is now operational and may be used to send and receive messages.\r\n\r\n##Specialized Clients\r\n\r\nA number of specialized clients can exist on the network which may be utilized by normal clients for enhanced functions and operations such as user directories, discussion boards and many other functions.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}